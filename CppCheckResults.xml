<?xml version="1.0" encoding="UTF-8" ?>
<results version="2">
    <cppcheck version="1.82" />
    <errors>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Path&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Path&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="Path.cpp" file="url/Path.h" line="41" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Exception&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Exception&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="ServerThread.cpp" file="json/json.h" line="499" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;RuntimeError&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;RuntimeError&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="ServerThread.cpp" file="json/json.h" line="514" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;LogicError&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;LogicError&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="ServerThread.cpp" file="json/json.h" line="525" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="ServerThread.cpp" file="json/json.h" line="726" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="ServerThread.cpp" file="json/json.h" line="727" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="ServerThread.cpp" file="json/json.h" line="728" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="ServerThread.cpp" file="json/json.h" line="730" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="ServerThread.cpp" file="json/json.h" line="731" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="ServerThread.cpp" file="json/json.h" line="733" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="ServerThread.cpp" file="json/json.h" line="734" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="ServerThread.cpp" file="json/json.h" line="751" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="ServerThread.cpp" file="json/json.h" line="752" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="ServerThread.cpp" file="json/json.h" line="756" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CZString&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CZString&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="ServerThread.cpp" file="json/json.h" line="671" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;PathArgument&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;PathArgument&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="ServerThread.cpp" file="json/json.h" line="1075" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;PathArgument&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;PathArgument&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="ServerThread.cpp" file="json/json.h" line="1076" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;PathArgument&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;PathArgument&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="ServerThread.cpp" file="json/json.h" line="1077" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ValueConstIterator&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ValueConstIterator&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="ServerThread.cpp" file="json/json.h" line="1210" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Reader&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Reader&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="ServerThread.cpp" file="json/json.h" line="1386" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;StyledStreamWriter&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;StyledStreamWriter&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="ServerThread.cpp" file="json/json.h" line="2024" />
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: s" verbose="Unused variable: s" cwe="563">
            <location file="Url.cpp" line="167" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Path&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Path&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="Url.cpp" file="url/Path.h" line="41" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;BadUrl&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;BadUrl&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="Url.cpp" file="url/Url.h" line="213" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;UrlParseError&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;UrlParseError&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="Url.cpp" file="url/Url.h" line="222" />
        </error>
        <error id="catchExceptionByValue" severity="style" msg="Exception should be caught by reference." verbose="The exception is caught by value. It could be caught as a (const) reference which is usually recommended in C++." cwe="398">
            <location file="Url.cpp" line="158" />
        </error>
        <error id="catchExceptionByValue" severity="style" msg="Exception should be caught by reference." verbose="The exception is caught by value. It could be caught as a (const) reference which is usually recommended in C++." cwe="398">
            <location file="Url.cpp" line="412" />
        </error>
        <error id="catchExceptionByValue" severity="style" msg="Exception should be caught by reference." verbose="The exception is caught by value. It could be caught as a (const) reference which is usually recommended in C++." cwe="398">
            <location file="Url.cpp" line="441" />
        </error>
        <error id="catchExceptionByValue" severity="style" msg="Exception should be caught by reference." verbose="The exception is caught by value. It could be caught as a (const) reference which is usually recommended in C++." cwe="398">
            <location file="Url.cpp" line="443" />
        </error>
        <error id="catchExceptionByValue" severity="style" msg="Exception should be caught by reference." verbose="The exception is caught by value. It could be caught as a (const) reference which is usually recommended in C++." cwe="398">
            <location file="Url.cpp" line="492" />
        </error>
        <error id="catchExceptionByValue" severity="style" msg="Exception should be caught by reference." verbose="The exception is caught by value. It could be caught as a (const) reference which is usually recommended in C++." cwe="398">
            <location file="Url.cpp" line="494" />
        </error>
        <error id="catchExceptionByValue" severity="style" msg="Exception should be caught by reference." verbose="The exception is caught by value. It could be caught as a (const) reference which is usually recommended in C++." cwe="398">
            <location file="Url.cpp" line="562" />
        </error>
        <error id="catchExceptionByValue" severity="style" msg="Exception should be caught by reference." verbose="The exception is caught by value. It could be caught as a (const) reference which is usually recommended in C++." cwe="398">
            <location file="Url.cpp" line="588" />
        </error>
        <error id="catchExceptionByValue" severity="style" msg="Exception should be caught by reference." verbose="The exception is caught by value. It could be caught as a (const) reference which is usually recommended in C++." cwe="398">
            <location file="Url.cpp" line="590" />
        </error>
        <error id="stlIfStrFind" severity="performance" msg="Inefficient usage of string::find() in condition; string::compare() would be faster." verbose="Either inefficient or wrong usage of string::find(). string::compare() will be faster if string::find&apos;s result is compared with 0, because it will not scan the whole string. If your intention is to check that there are no findings in the string, you should compare with std::string::npos." cwe="597">
            <location file="Utils.cpp" line="286" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;SharedLock&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;SharedLock&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="WebSiteContent.cpp" file="serverhttp/utility.hpp" line="321" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Exception&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Exception&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="WebSiteContent.cpp" file="json/json.h" line="499" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;RuntimeError&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;RuntimeError&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="WebSiteContent.cpp" file="json/json.h" line="514" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;LogicError&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;LogicError&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="WebSiteContent.cpp" file="json/json.h" line="525" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="WebSiteContent.cpp" file="json/json.h" line="726" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="WebSiteContent.cpp" file="json/json.h" line="727" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="WebSiteContent.cpp" file="json/json.h" line="728" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="WebSiteContent.cpp" file="json/json.h" line="730" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="WebSiteContent.cpp" file="json/json.h" line="731" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="WebSiteContent.cpp" file="json/json.h" line="733" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="WebSiteContent.cpp" file="json/json.h" line="734" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="WebSiteContent.cpp" file="json/json.h" line="751" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="WebSiteContent.cpp" file="json/json.h" line="752" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="WebSiteContent.cpp" file="json/json.h" line="756" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CZString&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CZString&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="WebSiteContent.cpp" file="json/json.h" line="671" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;PathArgument&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;PathArgument&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="WebSiteContent.cpp" file="json/json.h" line="1075" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;PathArgument&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;PathArgument&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="WebSiteContent.cpp" file="json/json.h" line="1076" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;PathArgument&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;PathArgument&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="WebSiteContent.cpp" file="json/json.h" line="1077" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ValueConstIterator&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ValueConstIterator&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="WebSiteContent.cpp" file="json/json.h" line="1210" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Reader&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Reader&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="WebSiteContent.cpp" file="json/json.h" line="1386" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;StyledStreamWriter&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;StyledStreamWriter&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="WebSiteContent.cpp" file="json/json.h" line="2024" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Path&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Path&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="WebSiteContent.cpp" file="url/Path.h" line="41" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;BadUrl&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;BadUrl&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="WebSiteContent.cpp" file="url/Url.h" line="213" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;UrlParseError&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;UrlParseError&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="WebSiteContent.cpp" file="url/Url.h" line="222" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;SimpleWeb :: ServerBase &lt; HTTP &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;SimpleWeb :: ServerBase &lt; HTTP &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="WebSiteContent.cpp" file="serverhttp/server_http.hpp" line="413" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Content&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Content&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="WebSiteContent.cpp" file="serverhttp/server_http.hpp" line="178" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Config&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Config&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="WebSiteContent.cpp" file="serverhttp/server_http.hpp" line="287" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;regex_orderable&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;regex_orderable&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="WebSiteContent.cpp" file="serverhttp/server_http.hpp" line="316" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;regex_orderable&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;regex_orderable&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="WebSiteContent.cpp" file="serverhttp/server_http.hpp" line="317" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;SimpleWeb :: ServerBase &lt; SimpleWeb :: HTTP &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;SimpleWeb :: ServerBase &lt; SimpleWeb :: HTTP &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="WebSiteContent.cpp" file="serverhttp/server_http.hpp" line="413" />
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;session&apos; should be passed by reference." verbose="Parameter &apos;session&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." cwe="398">
            <location file0="WebSiteContent.cpp" file="serverhttp/server_http.hpp" line="66" />
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;remote_endpoint&apos; should be passed by reference." verbose="Parameter &apos;remote_endpoint&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." cwe="398">
            <location file0="WebSiteContent.cpp" file="serverhttp/server_http.hpp" line="188" />
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;handler_runner&apos; should be passed by reference." verbose="Parameter &apos;handler_runner&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." cwe="398">
            <location file0="WebSiteContent.cpp" file="serverhttp/server_http.hpp" line="228" />
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;connection&apos; should be passed by reference." verbose="Parameter &apos;connection&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." cwe="398">
            <location file0="WebSiteContent.cpp" file="serverhttp/server_http.hpp" line="271" />
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;regex_str&apos; should be passed by reference." verbose="Parameter &apos;regex_str&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." cwe="398">
            <location file0="WebSiteContent.cpp" file="serverhttp/server_http.hpp" line="317" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;SharedLock&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;SharedLock&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="WebSiteContent.h" file="serverhttp/utility.hpp" line="321" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;SimpleWeb :: ServerBase &lt; HTTP &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;SimpleWeb :: ServerBase &lt; HTTP &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="WebSiteContent.h" file="serverhttp/server_http.hpp" line="413" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Content&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Content&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="WebSiteContent.h" file="serverhttp/server_http.hpp" line="178" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Config&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Config&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="WebSiteContent.h" file="serverhttp/server_http.hpp" line="287" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;regex_orderable&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;regex_orderable&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="WebSiteContent.h" file="serverhttp/server_http.hpp" line="316" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;regex_orderable&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;regex_orderable&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="WebSiteContent.h" file="serverhttp/server_http.hpp" line="317" />
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;session&apos; should be passed by reference." verbose="Parameter &apos;session&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." cwe="398">
            <location file0="WebSiteContent.h" file="serverhttp/server_http.hpp" line="66" />
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;remote_endpoint&apos; should be passed by reference." verbose="Parameter &apos;remote_endpoint&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." cwe="398">
            <location file0="WebSiteContent.h" file="serverhttp/server_http.hpp" line="188" />
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;handler_runner&apos; should be passed by reference." verbose="Parameter &apos;handler_runner&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." cwe="398">
            <location file0="WebSiteContent.h" file="serverhttp/server_http.hpp" line="228" />
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;connection&apos; should be passed by reference." verbose="Parameter &apos;connection&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." cwe="398">
            <location file0="WebSiteContent.h" file="serverhttp/server_http.hpp" line="271" />
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;regex_str&apos; should be passed by reference." verbose="Parameter &apos;regex_str&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." cwe="398">
            <location file0="WebSiteContent.h" file="serverhttp/server_http.hpp" line="317" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;date::year&apos; is never used." verbose="struct member &apos;date::year&apos; is never used." cwe="563">
            <location file="defines.h" line="40" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;date::month&apos; is never used." verbose="struct member &apos;date::month&apos; is never used." cwe="563">
            <location file="defines.h" line="41" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;date::day&apos; is never used." verbose="struct member &apos;date::day&apos; is never used." cwe="563">
            <location file="defines.h" line="42" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;date::hour&apos; is never used." verbose="struct member &apos;date::hour&apos; is never used." cwe="563">
            <location file="defines.h" line="43" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;StringStorage::policy_&apos; is never used." verbose="struct member &apos;StringStorage::policy_&apos; is never used." cwe="563">
            <location file="json/json.h" line="691" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;StringStorage::length_&apos; is never used." verbose="struct member &apos;StringStorage::length_&apos; is never used." cwe="563">
            <location file="json/json.h" line="692" />
        </error>
        <error id="unusedStructMember" severity="style" msg="union member &apos;ValueHolder::real_&apos; is never used." verbose="union member &apos;ValueHolder::real_&apos; is never used." cwe="563">
            <location file="json/json.h" line="1051" />
        </error>
        <error id="unusedStructMember" severity="style" msg="union member &apos;ValueHolder::bool_&apos; is never used." verbose="union member &apos;ValueHolder::bool_&apos; is never used." cwe="563">
            <location file="json/json.h" line="1052" />
        </error>
        <error id="unusedStructMember" severity="style" msg="union member &apos;ValueHolder::string_&apos; is never used." verbose="union member &apos;ValueHolder::string_&apos; is never used." cwe="563">
            <location file="json/json.h" line="1053" />
        </error>
        <error id="unusedStructMember" severity="style" msg="union member &apos;ValueHolder::map_&apos; is never used." verbose="union member &apos;ValueHolder::map_&apos; is never used." cwe="563">
            <location file="json/json.h" line="1054" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;StructuredError::offset_start&apos; is never used." verbose="struct member &apos;StructuredError::offset_start&apos; is never used." cwe="563">
            <location file="json/json.h" line="1373" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;StructuredError::offset_limit&apos; is never used." verbose="struct member &apos;StructuredError::offset_limit&apos; is never used." cwe="563">
            <location file="json/json.h" line="1374" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Exception&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Exception&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="json/json.h" line="499" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;RuntimeError&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;RuntimeError&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="json/json.h" line="514" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;LogicError&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;LogicError&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="json/json.h" line="525" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="json/json.h" line="726" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="json/json.h" line="727" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="json/json.h" line="728" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="json/json.h" line="730" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="json/json.h" line="731" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="json/json.h" line="733" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="json/json.h" line="734" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="json/json.h" line="751" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="json/json.h" line="752" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="json/json.h" line="756" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CZString&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CZString&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="json/json.h" line="671" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;PathArgument&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;PathArgument&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="json/json.h" line="1075" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;PathArgument&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;PathArgument&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="json/json.h" line="1076" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;PathArgument&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;PathArgument&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="json/json.h" line="1077" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ValueConstIterator&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ValueConstIterator&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="json/json.h" line="1210" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Reader&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Reader&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="json/json.h" line="1386" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;StyledStreamWriter&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;StyledStreamWriter&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="json/json.h" line="2024" />
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." cwe="686">
            <location file="jsoncpp.cpp" line="4224" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;surrogatePair&apos; can be reduced." verbose="The scope of the variable &apos;surrogatePair&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="jsoncpp.cpp" line="926" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;surrogatePair&apos; can be reduced." verbose="The scope of the variable &apos;surrogatePair&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="jsoncpp.cpp" line="1929" />
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;StyledStreamWriter::indented_&apos; is not initialized in the constructor." verbose="Member variable &apos;StyledStreamWriter::indented_&apos; is not initialized in the constructor." cwe="398">
            <location file="jsoncpp.cpp" line="4693" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Exception&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Exception&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="jsoncpp.cpp" file="json/json.h" line="499" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;RuntimeError&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;RuntimeError&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="jsoncpp.cpp" file="json/json.h" line="514" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;LogicError&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;LogicError&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="jsoncpp.cpp" file="json/json.h" line="525" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="jsoncpp.cpp" file="json/json.h" line="726" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="jsoncpp.cpp" file="json/json.h" line="727" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="jsoncpp.cpp" file="json/json.h" line="728" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="jsoncpp.cpp" file="json/json.h" line="730" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="jsoncpp.cpp" file="json/json.h" line="731" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="jsoncpp.cpp" file="json/json.h" line="733" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="jsoncpp.cpp" file="json/json.h" line="734" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="jsoncpp.cpp" file="json/json.h" line="751" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="jsoncpp.cpp" file="json/json.h" line="752" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="jsoncpp.cpp" file="json/json.h" line="756" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CZString&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CZString&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="jsoncpp.cpp" file="json/json.h" line="671" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;PathArgument&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;PathArgument&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="jsoncpp.cpp" file="json/json.h" line="1075" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;PathArgument&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;PathArgument&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="jsoncpp.cpp" file="json/json.h" line="1076" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;PathArgument&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;PathArgument&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="jsoncpp.cpp" file="json/json.h" line="1077" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ValueConstIterator&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ValueConstIterator&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="jsoncpp.cpp" file="json/json.h" line="1210" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Reader&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Reader&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="jsoncpp.cpp" file="json/json.h" line="1386" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;StyledStreamWriter&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;StyledStreamWriter&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="jsoncpp.cpp" file="json/json.h" line="2024" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;OurReader&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;OurReader&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="jsoncpp.cpp" line="1148" />
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;indentation&apos; should be passed by reference." verbose="Parameter &apos;indentation&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." cwe="398">
            <location file="jsoncpp.cpp" line="4693" />
        </error>
        <error id="duplInheritedMember" severity="warning" msg="The class &apos;MultiSwitchArg&apos; defines member variable with name &apos;_value&apos; also defined in its parent class &apos;SwitchArg&apos;." verbose="The class &apos;MultiSwitchArg&apos; defines member variable with name &apos;_value&apos; also defined in its parent class &apos;SwitchArg&apos;." cwe="398">
            <location file0="main.cpp" file="../smarttrafficmeter/tclap/SwitchArg.h" line="46" />
            <location file0="main.cpp" file="../smarttrafficmeter/tclap/MultiSwitchArg.h" line="46" />
        </error>
        <error id="duplInheritedMember" severity="warning" msg="The class &apos;MultiSwitchArg&apos; defines member variable with name &apos;_default&apos; also defined in its parent class &apos;SwitchArg&apos;." verbose="The class &apos;MultiSwitchArg&apos; defines member variable with name &apos;_default&apos; also defined in its parent class &apos;SwitchArg&apos;." cwe="398">
            <location file0="main.cpp" file="../smarttrafficmeter/tclap/SwitchArg.h" line="52" />
            <location file0="main.cpp" file="../smarttrafficmeter/tclap/MultiSwitchArg.h" line="52" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ExitException&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ExitException&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="main.cpp" file="../smarttrafficmeter/tclap/ArgException.h" line="189" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ValuesConstraint&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ValuesConstraint&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="main.cpp" file="../smarttrafficmeter/tclap/ValuesConstraint.h" line="51" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;SharedLock&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;SharedLock&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="main.cpp" file="serverhttp/utility.hpp" line="321" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;SimpleWeb :: ServerBase &lt; HTTP &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;SimpleWeb :: ServerBase &lt; HTTP &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="main.cpp" file="serverhttp/server_http.hpp" line="413" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Content&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Content&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="main.cpp" file="serverhttp/server_http.hpp" line="178" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Config&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Config&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="main.cpp" file="serverhttp/server_http.hpp" line="287" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;regex_orderable&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;regex_orderable&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="main.cpp" file="serverhttp/server_http.hpp" line="316" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;regex_orderable&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;regex_orderable&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="main.cpp" file="serverhttp/server_http.hpp" line="317" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;SimpleWeb :: ServerBase &lt; SimpleWeb :: HTTP &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;SimpleWeb :: ServerBase &lt; SimpleWeb :: HTTP &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="main.cpp" file="serverhttp/server_http.hpp" line="413" />
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;session&apos; should be passed by reference." verbose="Parameter &apos;session&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." cwe="398">
            <location file0="main.cpp" file="serverhttp/server_http.hpp" line="66" />
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;remote_endpoint&apos; should be passed by reference." verbose="Parameter &apos;remote_endpoint&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." cwe="398">
            <location file0="main.cpp" file="serverhttp/server_http.hpp" line="188" />
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;handler_runner&apos; should be passed by reference." verbose="Parameter &apos;handler_runner&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." cwe="398">
            <location file0="main.cpp" file="serverhttp/server_http.hpp" line="228" />
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;connection&apos; should be passed by reference." verbose="Parameter &apos;connection&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." cwe="398">
            <location file0="main.cpp" file="serverhttp/server_http.hpp" line="271" />
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;regex_str&apos; should be passed by reference." verbose="Parameter &apos;regex_str&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." cwe="398">
            <location file0="main.cpp" file="serverhttp/server_http.hpp" line="317" />
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398">
            <location file0="main.cpp" file="../smarttrafficmeter/tclap/StdOutput.h" line="179" />
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398">
            <location file0="main.cpp" file="../smarttrafficmeter/tclap/StdOutput.h" line="217" />
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398">
            <location file0="main.cpp" file="tclap/CmdLine.h" line="420" />
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398">
            <location file0="main.cpp" file="tclap/CmdLine.h" line="459" />
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398">
            <location file0="main.cpp" file="tclap/CmdLine.h" line="528" />
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398">
            <location file0="main.cpp" file="tclap/CmdLine.h" line="620" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;SharedLock&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;SharedLock&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="serverhttp/server_http.hpp" file="serverhttp/utility.hpp" line="321" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;SimpleWeb :: ServerBase &lt; HTTP &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;SimpleWeb :: ServerBase &lt; HTTP &gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="serverhttp/server_http.hpp" line="413" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Content&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Content&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="serverhttp/server_http.hpp" line="178" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Config&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Config&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="serverhttp/server_http.hpp" line="287" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;regex_orderable&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;regex_orderable&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="serverhttp/server_http.hpp" line="316" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;regex_orderable&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;regex_orderable&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="serverhttp/server_http.hpp" line="317" />
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;session&apos; should be passed by reference." verbose="Parameter &apos;session&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." cwe="398">
            <location file="serverhttp/server_http.hpp" line="66" />
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;remote_endpoint&apos; should be passed by reference." verbose="Parameter &apos;remote_endpoint&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." cwe="398">
            <location file="serverhttp/server_http.hpp" line="188" />
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;handler_runner&apos; should be passed by reference." verbose="Parameter &apos;handler_runner&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." cwe="398">
            <location file="serverhttp/server_http.hpp" line="228" />
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;connection&apos; should be passed by reference." verbose="Parameter &apos;connection&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." cwe="398">
            <location file="serverhttp/server_http.hpp" line="271" />
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;regex_str&apos; should be passed by reference." verbose="Parameter &apos;regex_str&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." cwe="398">
            <location file="serverhttp/server_http.hpp" line="317" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;SharedLock&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;SharedLock&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="serverhttp/utility.hpp" line="321" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_file::pMethods&apos; is never used." verbose="struct member &apos;sqlite3_file::pMethods&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="672" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_io_methods::iVersion&apos; is never used." verbose="struct member &apos;sqlite3_io_methods::iVersion&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="771" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_io_methods::xClose&apos; is never used." verbose="struct member &apos;sqlite3_io_methods::xClose&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="772" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_io_methods::xRead&apos; is never used." verbose="struct member &apos;sqlite3_io_methods::xRead&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="773" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_io_methods::xWrite&apos; is never used." verbose="struct member &apos;sqlite3_io_methods::xWrite&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="774" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_io_methods::xTruncate&apos; is never used." verbose="struct member &apos;sqlite3_io_methods::xTruncate&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="775" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_io_methods::xSync&apos; is never used." verbose="struct member &apos;sqlite3_io_methods::xSync&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="776" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_io_methods::xFileSize&apos; is never used." verbose="struct member &apos;sqlite3_io_methods::xFileSize&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="777" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_io_methods::xLock&apos; is never used." verbose="struct member &apos;sqlite3_io_methods::xLock&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="778" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_io_methods::xUnlock&apos; is never used." verbose="struct member &apos;sqlite3_io_methods::xUnlock&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="779" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_io_methods::xCheckReservedLock&apos; is never used." verbose="struct member &apos;sqlite3_io_methods::xCheckReservedLock&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="780" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_io_methods::xFileControl&apos; is never used." verbose="struct member &apos;sqlite3_io_methods::xFileControl&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="781" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_io_methods::xSectorSize&apos; is never used." verbose="struct member &apos;sqlite3_io_methods::xSectorSize&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="782" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_io_methods::xDeviceCharacteristics&apos; is never used." verbose="struct member &apos;sqlite3_io_methods::xDeviceCharacteristics&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="783" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_io_methods::xShmMap&apos; is never used." verbose="struct member &apos;sqlite3_io_methods::xShmMap&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="785" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_io_methods::xShmLock&apos; is never used." verbose="struct member &apos;sqlite3_io_methods::xShmLock&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="786" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_io_methods::xShmBarrier&apos; is never used." verbose="struct member &apos;sqlite3_io_methods::xShmBarrier&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="787" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_io_methods::xShmUnmap&apos; is never used." verbose="struct member &apos;sqlite3_io_methods::xShmUnmap&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="788" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_io_methods::xFetch&apos; is never used." verbose="struct member &apos;sqlite3_io_methods::xFetch&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="790" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_io_methods::xUnfetch&apos; is never used." verbose="struct member &apos;sqlite3_io_methods::xUnfetch&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="791" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_mem_methods::xMalloc&apos; is never used." verbose="struct member &apos;sqlite3_mem_methods::xMalloc&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="1593" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_mem_methods::xFree&apos; is never used." verbose="struct member &apos;sqlite3_mem_methods::xFree&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="1594" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_mem_methods::xRealloc&apos; is never used." verbose="struct member &apos;sqlite3_mem_methods::xRealloc&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="1595" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_mem_methods::xSize&apos; is never used." verbose="struct member &apos;sqlite3_mem_methods::xSize&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="1596" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_mem_methods::xRoundup&apos; is never used." verbose="struct member &apos;sqlite3_mem_methods::xRoundup&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="1597" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_mem_methods::xInit&apos; is never used." verbose="struct member &apos;sqlite3_mem_methods::xInit&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="1598" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_mem_methods::xShutdown&apos; is never used." verbose="struct member &apos;sqlite3_mem_methods::xShutdown&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="1599" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_mem_methods::pAppData&apos; is never used." verbose="struct member &apos;sqlite3_mem_methods::pAppData&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="1600" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_vtab_cursor::pVtab&apos; is never used." verbose="struct member &apos;sqlite3_vtab_cursor::pVtab&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="6384" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_mutex_methods::xMutexInit&apos; is never used." verbose="struct member &apos;sqlite3_mutex_methods::xMutexInit&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="6889" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_mutex_methods::xMutexEnd&apos; is never used." verbose="struct member &apos;sqlite3_mutex_methods::xMutexEnd&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="6890" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_mutex_methods::xMutexAlloc&apos; is never used." verbose="struct member &apos;sqlite3_mutex_methods::xMutexAlloc&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="6891" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_mutex_methods::xMutexFree&apos; is never used." verbose="struct member &apos;sqlite3_mutex_methods::xMutexFree&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="6892" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_mutex_methods::xMutexEnter&apos; is never used." verbose="struct member &apos;sqlite3_mutex_methods::xMutexEnter&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="6893" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_mutex_methods::xMutexTry&apos; is never used." verbose="struct member &apos;sqlite3_mutex_methods::xMutexTry&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="6894" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_mutex_methods::xMutexLeave&apos; is never used." verbose="struct member &apos;sqlite3_mutex_methods::xMutexLeave&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="6895" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_mutex_methods::xMutexHeld&apos; is never used." verbose="struct member &apos;sqlite3_mutex_methods::xMutexHeld&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="6896" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_mutex_methods::xMutexNotheld&apos; is never used." verbose="struct member &apos;sqlite3_mutex_methods::xMutexNotheld&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="6897" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_pcache_methods2::iVersion&apos; is never used." verbose="struct member &apos;sqlite3_pcache_methods2::iVersion&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="7598" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_pcache_methods2::pArg&apos; is never used." verbose="struct member &apos;sqlite3_pcache_methods2::pArg&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="7599" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_pcache_methods2::xInit&apos; is never used." verbose="struct member &apos;sqlite3_pcache_methods2::xInit&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="7600" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_pcache_methods2::xShutdown&apos; is never used." verbose="struct member &apos;sqlite3_pcache_methods2::xShutdown&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="7601" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_pcache_methods2::xCreate&apos; is never used." verbose="struct member &apos;sqlite3_pcache_methods2::xCreate&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="7602" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_pcache_methods2::xCachesize&apos; is never used." verbose="struct member &apos;sqlite3_pcache_methods2::xCachesize&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="7603" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_pcache_methods2::xPagecount&apos; is never used." verbose="struct member &apos;sqlite3_pcache_methods2::xPagecount&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="7604" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_pcache_methods2::xFetch&apos; is never used." verbose="struct member &apos;sqlite3_pcache_methods2::xFetch&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="7605" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_pcache_methods2::xUnpin&apos; is never used." verbose="struct member &apos;sqlite3_pcache_methods2::xUnpin&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="7606" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_pcache_methods2::xRekey&apos; is never used." verbose="struct member &apos;sqlite3_pcache_methods2::xRekey&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="7607" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_pcache_methods2::xTruncate&apos; is never used." verbose="struct member &apos;sqlite3_pcache_methods2::xTruncate&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="7609" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_pcache_methods2::xDestroy&apos; is never used." verbose="struct member &apos;sqlite3_pcache_methods2::xDestroy&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="7610" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_pcache_methods2::xShrink&apos; is never used." verbose="struct member &apos;sqlite3_pcache_methods2::xShrink&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="7611" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_pcache_methods::pArg&apos; is never used." verbose="struct member &apos;sqlite3_pcache_methods::pArg&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="7621" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_pcache_methods::xInit&apos; is never used." verbose="struct member &apos;sqlite3_pcache_methods::xInit&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="7622" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_pcache_methods::xShutdown&apos; is never used." verbose="struct member &apos;sqlite3_pcache_methods::xShutdown&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="7623" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_pcache_methods::xCreate&apos; is never used." verbose="struct member &apos;sqlite3_pcache_methods::xCreate&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="7624" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_pcache_methods::xCachesize&apos; is never used." verbose="struct member &apos;sqlite3_pcache_methods::xCachesize&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="7625" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_pcache_methods::xPagecount&apos; is never used." verbose="struct member &apos;sqlite3_pcache_methods::xPagecount&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="7626" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_pcache_methods::xFetch&apos; is never used." verbose="struct member &apos;sqlite3_pcache_methods::xFetch&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="7627" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_pcache_methods::xUnpin&apos; is never used." verbose="struct member &apos;sqlite3_pcache_methods::xUnpin&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="7628" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_pcache_methods::xRekey&apos; is never used." verbose="struct member &apos;sqlite3_pcache_methods::xRekey&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="7629" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_pcache_methods::xTruncate&apos; is never used." verbose="struct member &apos;sqlite3_pcache_methods::xTruncate&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="7630" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_pcache_methods::xDestroy&apos; is never used." verbose="struct member &apos;sqlite3_pcache_methods::xDestroy&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="7631" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_rtree_geometry::pContext&apos; is never used." verbose="struct member &apos;sqlite3_rtree_geometry::pContext&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="8862" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_rtree_geometry::nParam&apos; is never used." verbose="struct member &apos;sqlite3_rtree_geometry::nParam&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="8863" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_rtree_geometry::aParam&apos; is never used." verbose="struct member &apos;sqlite3_rtree_geometry::aParam&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="8864" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_rtree_geometry::pUser&apos; is never used." verbose="struct member &apos;sqlite3_rtree_geometry::pUser&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="8865" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_rtree_geometry::xDelUser&apos; is never used." verbose="struct member &apos;sqlite3_rtree_geometry::xDelUser&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="8866" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_rtree_query_info::pContext&apos; is never used." verbose="struct member &apos;sqlite3_rtree_query_info::pContext&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="8894" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_rtree_query_info::nParam&apos; is never used." verbose="struct member &apos;sqlite3_rtree_query_info::nParam&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="8895" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_rtree_query_info::aParam&apos; is never used." verbose="struct member &apos;sqlite3_rtree_query_info::aParam&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="8896" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_rtree_query_info::pUser&apos; is never used." verbose="struct member &apos;sqlite3_rtree_query_info::pUser&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="8897" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_rtree_query_info::xDelUser&apos; is never used." verbose="struct member &apos;sqlite3_rtree_query_info::xDelUser&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="8898" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_rtree_query_info::aCoord&apos; is never used." verbose="struct member &apos;sqlite3_rtree_query_info::aCoord&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="8899" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_rtree_query_info::anQueue&apos; is never used." verbose="struct member &apos;sqlite3_rtree_query_info::anQueue&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="8900" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_rtree_query_info::nCoord&apos; is never used." verbose="struct member &apos;sqlite3_rtree_query_info::nCoord&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="8901" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_rtree_query_info::iLevel&apos; is never used." verbose="struct member &apos;sqlite3_rtree_query_info::iLevel&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="8902" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_rtree_query_info::mxLevel&apos; is never used." verbose="struct member &apos;sqlite3_rtree_query_info::mxLevel&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="8903" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_rtree_query_info::iRowid&apos; is never used." verbose="struct member &apos;sqlite3_rtree_query_info::iRowid&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="8904" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_rtree_query_info::rParentScore&apos; is never used." verbose="struct member &apos;sqlite3_rtree_query_info::rParentScore&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="8905" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_rtree_query_info::eParentWithin&apos; is never used." verbose="struct member &apos;sqlite3_rtree_query_info::eParentWithin&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="8906" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_rtree_query_info::eWithin&apos; is never used." verbose="struct member &apos;sqlite3_rtree_query_info::eWithin&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="8907" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_rtree_query_info::rScore&apos; is never used." verbose="struct member &apos;sqlite3_rtree_query_info::rScore&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="8908" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_rtree_query_info::apSqlParam&apos; is never used." verbose="struct member &apos;sqlite3_rtree_query_info::apSqlParam&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="8910" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;Fts5PhraseIter::a&apos; is never used." verbose="struct member &apos;Fts5PhraseIter::a&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="10296" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;Fts5PhraseIter::b&apos; is never used." verbose="struct member &apos;Fts5PhraseIter::b&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="10297" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;Fts5ExtensionApi::iVersion&apos; is never used." verbose="struct member &apos;Fts5ExtensionApi::iVersion&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="10516" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;Fts5ExtensionApi::xUserData&apos; is never used." verbose="struct member &apos;Fts5ExtensionApi::xUserData&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="10518" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;Fts5ExtensionApi::xColumnCount&apos; is never used." verbose="struct member &apos;Fts5ExtensionApi::xColumnCount&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="10520" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;Fts5ExtensionApi::xRowCount&apos; is never used." verbose="struct member &apos;Fts5ExtensionApi::xRowCount&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="10521" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;Fts5ExtensionApi::xColumnTotalSize&apos; is never used." verbose="struct member &apos;Fts5ExtensionApi::xColumnTotalSize&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="10522" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;Fts5ExtensionApi::xTokenize&apos; is never used." verbose="struct member &apos;Fts5ExtensionApi::xTokenize&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="10524" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;Fts5ExtensionApi::xPhraseCount&apos; is never used." verbose="struct member &apos;Fts5ExtensionApi::xPhraseCount&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="10530" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;Fts5ExtensionApi::xPhraseSize&apos; is never used." verbose="struct member &apos;Fts5ExtensionApi::xPhraseSize&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="10531" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;Fts5ExtensionApi::xInstCount&apos; is never used." verbose="struct member &apos;Fts5ExtensionApi::xInstCount&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="10533" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;Fts5ExtensionApi::xInst&apos; is never used." verbose="struct member &apos;Fts5ExtensionApi::xInst&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="10534" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;Fts5ExtensionApi::xRowid&apos; is never used." verbose="struct member &apos;Fts5ExtensionApi::xRowid&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="10536" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;Fts5ExtensionApi::xColumnText&apos; is never used." verbose="struct member &apos;Fts5ExtensionApi::xColumnText&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="10537" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;Fts5ExtensionApi::xColumnSize&apos; is never used." verbose="struct member &apos;Fts5ExtensionApi::xColumnSize&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="10538" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;Fts5ExtensionApi::xQueryPhrase&apos; is never used." verbose="struct member &apos;Fts5ExtensionApi::xQueryPhrase&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="10540" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;Fts5ExtensionApi::xSetAuxdata&apos; is never used." verbose="struct member &apos;Fts5ExtensionApi::xSetAuxdata&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="10543" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;Fts5ExtensionApi::xGetAuxdata&apos; is never used." verbose="struct member &apos;Fts5ExtensionApi::xGetAuxdata&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="10544" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;Fts5ExtensionApi::xPhraseFirst&apos; is never used." verbose="struct member &apos;Fts5ExtensionApi::xPhraseFirst&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="10546" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;Fts5ExtensionApi::xPhraseNext&apos; is never used." verbose="struct member &apos;Fts5ExtensionApi::xPhraseNext&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="10547" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;Fts5ExtensionApi::xPhraseFirstColumn&apos; is never used." verbose="struct member &apos;Fts5ExtensionApi::xPhraseFirstColumn&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="10549" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;Fts5ExtensionApi::xPhraseNextColumn&apos; is never used." verbose="struct member &apos;Fts5ExtensionApi::xPhraseNextColumn&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="10550" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;fts5_tokenizer::xCreate&apos; is never used." verbose="struct member &apos;fts5_tokenizer::xCreate&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="10752" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;fts5_tokenizer::xDelete&apos; is never used." verbose="struct member &apos;fts5_tokenizer::xDelete&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="10753" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;fts5_tokenizer::xTokenize&apos; is never used." verbose="struct member &apos;fts5_tokenizer::xTokenize&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="10754" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;fts5_api::iVersion&apos; is never used." verbose="struct member &apos;fts5_api::iVersion&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="10788" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;fts5_api::xCreateTokenizer&apos; is never used." verbose="struct member &apos;fts5_api::xCreateTokenizer&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="10791" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;fts5_api::xFindTokenizer&apos; is never used." verbose="struct member &apos;fts5_api::xFindTokenizer&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="10800" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;fts5_api::xCreateFunction&apos; is never used." verbose="struct member &apos;fts5_api::xCreateFunction&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3.h" line="10808" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::aggregate_context&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::aggregate_context&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="33" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::aggregate_count&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::aggregate_count&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="34" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::bind_blob&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::bind_blob&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="35" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::bind_double&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::bind_double&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="36" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::bind_int&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::bind_int&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="37" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::bind_int64&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::bind_int64&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="38" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::bind_null&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::bind_null&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="39" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::bind_parameter_count&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::bind_parameter_count&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="40" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::bind_parameter_index&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::bind_parameter_index&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="41" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::bind_parameter_name&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::bind_parameter_name&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="42" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::bind_text&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::bind_text&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="43" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::bind_text16&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::bind_text16&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="44" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::bind_value&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::bind_value&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="45" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::busy_handler&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::busy_handler&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="46" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::busy_timeout&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::busy_timeout&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="47" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::changes&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::changes&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="48" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::close&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::close&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="49" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::collation_needed&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::collation_needed&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="50" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::collation_needed16&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::collation_needed16&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="52" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::column_blob&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::column_blob&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="54" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::column_bytes&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::column_bytes&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="55" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::column_bytes16&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::column_bytes16&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="56" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::column_count&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::column_count&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="57" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::column_database_name&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::column_database_name&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="58" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::column_database_name16&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::column_database_name16&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="59" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::column_decltype&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::column_decltype&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="60" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::column_decltype16&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::column_decltype16&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="61" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::column_double&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::column_double&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="62" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::column_int&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::column_int&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="63" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::column_int64&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::column_int64&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="64" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::column_name&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::column_name&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="65" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::column_name16&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::column_name16&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="66" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::column_origin_name&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::column_origin_name&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="67" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::column_origin_name16&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::column_origin_name16&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="68" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::column_table_name&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::column_table_name&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="69" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::column_table_name16&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::column_table_name16&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="70" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::column_text&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::column_text&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="71" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::column_text16&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::column_text16&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="72" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::column_type&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::column_type&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="73" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::column_value&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::column_value&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="74" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::commit_hook&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::commit_hook&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="75" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::complete&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::complete&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="76" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::complete16&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::complete16&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="77" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::create_collation&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::create_collation&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="78" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::create_collation16&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::create_collation16&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="80" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::create_function&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::create_function&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="82" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::create_function16&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::create_function16&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="86" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::create_module&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::create_module&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="90" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::data_count&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::data_count&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="91" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::db_handle&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::db_handle&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="92" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::declare_vtab&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::declare_vtab&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="93" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::enable_shared_cache&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::enable_shared_cache&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="94" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::errcode&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::errcode&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="95" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::errmsg&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::errmsg&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="96" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::errmsg16&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::errmsg16&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="97" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::exec&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::exec&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="98" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::expired&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::expired&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="99" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::finalize&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::finalize&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="100" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::free&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::free&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="101" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::free_table&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::free_table&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="102" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::get_autocommit&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::get_autocommit&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="103" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::get_auxdata&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::get_auxdata&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="104" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::get_table&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::get_table&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="105" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::global_recover&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::global_recover&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="106" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::interruptx&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::interruptx&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="107" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::last_insert_rowid&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::last_insert_rowid&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="108" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::libversion&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::libversion&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="109" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::libversion_number&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::libversion_number&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="110" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::malloc&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::malloc&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="111" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::mprintf&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::mprintf&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="112" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::open&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::open&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="113" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::open16&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::open16&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="114" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::prepare&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::prepare&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="115" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::prepare16&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::prepare16&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="116" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::profile&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::profile&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="117" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::progress_handler&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::progress_handler&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="118" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::realloc&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::realloc&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="119" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::reset&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::reset&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="120" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::result_blob&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::result_blob&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="121" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::result_double&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::result_double&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="122" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::result_error&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::result_error&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="123" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::result_error16&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::result_error16&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="124" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::result_int&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::result_int&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="125" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::result_int64&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::result_int64&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="126" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::result_null&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::result_null&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="127" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::result_text&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::result_text&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="128" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::result_text16&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::result_text16&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="129" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::result_text16be&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::result_text16be&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="130" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::result_text16le&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::result_text16le&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="131" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::result_value&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::result_value&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="132" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::rollback_hook&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::rollback_hook&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="133" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::set_authorizer&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::set_authorizer&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="134" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::set_auxdata&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::set_auxdata&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="136" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::xsnprintf&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::xsnprintf&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="137" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::step&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::step&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="138" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::table_column_metadata&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::table_column_metadata&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="139" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::thread_cleanup&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::thread_cleanup&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="141" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::total_changes&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::total_changes&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="142" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::trace&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::trace&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="143" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::transfer_bindings&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::transfer_bindings&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="144" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::update_hook&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::update_hook&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="145" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::user_data&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::user_data&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="147" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::value_blob&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::value_blob&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="148" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::value_bytes&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::value_bytes&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="149" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::value_bytes16&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::value_bytes16&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="150" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::value_double&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::value_double&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="151" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::value_int&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::value_int&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="152" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::value_int64&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::value_int64&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="153" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::value_numeric_type&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::value_numeric_type&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="154" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::value_text&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::value_text&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="155" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::value_text16&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::value_text16&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="156" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::value_text16be&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::value_text16be&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="157" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::value_text16le&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::value_text16le&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="158" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::value_type&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::value_type&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="159" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::vmprintf&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::vmprintf&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="160" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::overload_function&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::overload_function&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="162" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::prepare_v2&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::prepare_v2&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="164" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::prepare16_v2&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::prepare16_v2&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="165" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::clear_bindings&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::clear_bindings&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="166" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::create_module_v2&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::create_module_v2&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="168" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::bind_zeroblob&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::bind_zeroblob&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="171" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::blob_bytes&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::blob_bytes&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="172" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::blob_close&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::blob_close&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="173" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::blob_open&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::blob_open&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="174" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::blob_read&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::blob_read&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="176" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::blob_write&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::blob_write&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="177" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::create_collation_v2&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::create_collation_v2&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="178" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::file_control&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::file_control&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="181" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::memory_highwater&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::memory_highwater&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="182" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::memory_used&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::memory_used&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="183" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::mutex_alloc&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::mutex_alloc&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="184" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::mutex_enter&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::mutex_enter&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="185" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::mutex_free&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::mutex_free&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="186" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::mutex_leave&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::mutex_leave&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="187" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::mutex_try&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::mutex_try&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="188" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::open_v2&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::open_v2&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="189" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::release_memory&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::release_memory&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="190" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::result_error_nomem&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::result_error_nomem&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="191" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::result_error_toobig&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::result_error_toobig&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="192" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::sleep&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::sleep&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="193" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::soft_heap_limit&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::soft_heap_limit&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="194" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::vfs_find&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::vfs_find&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="195" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::vfs_register&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::vfs_register&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="196" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::vfs_unregister&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::vfs_unregister&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="197" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::xthreadsafe&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::xthreadsafe&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="198" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::result_zeroblob&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::result_zeroblob&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="199" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::result_error_code&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::result_error_code&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="200" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::test_control&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::test_control&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="201" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::randomness&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::randomness&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="202" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::context_db_handle&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::context_db_handle&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="203" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::extended_result_codes&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::extended_result_codes&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="204" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::limit&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::limit&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="205" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::next_stmt&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::next_stmt&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="206" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::sql&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::sql&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="207" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::status&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::status&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="208" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::backup_finish&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::backup_finish&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="209" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::backup_init&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::backup_init&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="210" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::backup_pagecount&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::backup_pagecount&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="211" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::backup_remaining&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::backup_remaining&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="212" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::backup_step&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::backup_step&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="213" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::compileoption_get&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::compileoption_get&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="214" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::compileoption_used&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::compileoption_used&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="215" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::create_function_v2&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::create_function_v2&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="216" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::db_config&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::db_config&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="221" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::db_mutex&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::db_mutex&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="222" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::db_status&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::db_status&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="223" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::extended_errcode&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::extended_errcode&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="224" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::log&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::log&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="225" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::soft_heap_limit64&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::soft_heap_limit64&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="226" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::sourceid&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::sourceid&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="227" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::stmt_status&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::stmt_status&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="228" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::strnicmp&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::strnicmp&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="229" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::unlock_notify&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::unlock_notify&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="230" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::wal_autocheckpoint&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::wal_autocheckpoint&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="231" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::wal_checkpoint&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::wal_checkpoint&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="232" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::wal_hook&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::wal_hook&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="233" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::blob_reopen&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::blob_reopen&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="234" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::vtab_config&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::vtab_config&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="235" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::vtab_on_conflict&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::vtab_on_conflict&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="236" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::close_v2&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::close_v2&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="238" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::db_filename&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::db_filename&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="239" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::db_readonly&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::db_readonly&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="240" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::db_release_memory&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::db_release_memory&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="241" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::errstr&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::errstr&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="242" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::stmt_busy&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::stmt_busy&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="243" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::stmt_readonly&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::stmt_readonly&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="244" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::stricmp&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::stricmp&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="245" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::uri_boolean&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::uri_boolean&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="246" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::uri_int64&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::uri_int64&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="247" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::uri_parameter&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::uri_parameter&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="248" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::xvsnprintf&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::xvsnprintf&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="249" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::wal_checkpoint_v2&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::wal_checkpoint_v2&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="250" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::auto_extension&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::auto_extension&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="252" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::bind_blob64&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::bind_blob64&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="253" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::bind_text64&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::bind_text64&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="255" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::cancel_auto_extension&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::cancel_auto_extension&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="257" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::load_extension&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::load_extension&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="258" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::malloc64&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::malloc64&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="259" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::msize&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::msize&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="260" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::realloc64&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::realloc64&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="261" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::reset_auto_extension&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::reset_auto_extension&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="262" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::result_blob64&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::result_blob64&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="263" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::result_text64&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::result_text64&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="265" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::strglob&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::strglob&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="267" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::value_dup&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::value_dup&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="269" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::value_free&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::value_free&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="270" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::result_zeroblob64&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::result_zeroblob64&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="271" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::bind_zeroblob64&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::bind_zeroblob64&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="272" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::value_subtype&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::value_subtype&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="274" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::result_subtype&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::result_subtype&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="275" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::status64&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::status64&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="277" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::strlike&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::strlike&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="278" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::db_cacheflush&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::db_cacheflush&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="279" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::system_errno&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::system_errno&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="281" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::trace_v2&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::trace_v2&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="283" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::expanded_sql&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::expanded_sql&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="284" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::set_last_insert_rowid&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::set_last_insert_rowid&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="286" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::prepare_v3&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::prepare_v3&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="288" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::prepare16_v3&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::prepare16_v3&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="290" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::bind_pointer&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::bind_pointer&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="292" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::result_pointer&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::result_pointer&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="293" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::value_pointer&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::value_pointer&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="294" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::vtab_nochange&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::vtab_nochange&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="295" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::value_nochange&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::value_nochange&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="296" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_api_routines::vtab_collation&apos; is never used." verbose="struct member &apos;sqlite3_api_routines::vtab_collation&apos; is never used." cwe="563">
            <location file="sqlite/sqlite3ext.h" line="297" />
        </error>
        <error id="compareBoolExpressionWithInt" severity="warning" msg="Comparison of a boolean expression with an integer." verbose="Comparison of a boolean expression with an integer." cwe="398">
            <location file="sqlite3.c" line="69651" />
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758">
            <location file="sqlite3.c" line="19799" />
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758">
            <location file="sqlite3.c" line="20356" />
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758">
            <location file="sqlite3.c" line="20440" />
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on union which contains a floating point number." verbose="Using memset() on union which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758">
            <location file="sqlite3.c" line="28374" />
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on union which contains a floating point number." verbose="Using memset() on union which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758">
            <location file="sqlite3.c" line="71550" />
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on union which contains a floating point number." verbose="Using memset() on union which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758">
            <location file="sqlite3.c" line="77988" />
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on union which contains a floating point number." verbose="Using memset() on union which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758">
            <location file="sqlite3.c" line="79836" />
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on union which contains a floating point number." verbose="Using memset() on union which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758">
            <location file="sqlite3.c" line="82507" />
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on union which contains a floating point number." verbose="Using memset() on union which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." cwe="758">
            <location file="sqlite3.c" line="86547" />
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;pEList!=0&apos; is redundant or there is possible null pointer dereference: pEList." verbose="Either the condition &apos;pEList!=0&apos; is redundant or there is possible null pointer dereference: pEList." cwe="476">
            <location file="sqlite3.c" line="95313" info="Null pointer dereference" />
            <location file="sqlite3.c" line="95328" info="Assuming that condition &apos;pEList!=0&apos; is not redundant" />
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;ppStmt==0&apos; is redundant or there is possible null pointer dereference: ppStmt." verbose="Either the condition &apos;ppStmt==0&apos; is redundant or there is possible null pointer dereference: ppStmt." cwe="476">
            <location file="sqlite3.c" line="118459" info="Null pointer dereference" />
            <location file="sqlite3.c" line="118535" info="Calling function &apos;sqlite3LockAndPrepare&apos;, 6th argument &apos;ppStmt&apos; value is 0" />
            <location file="sqlite3.c" line="118536" info="Assuming that condition &apos;ppStmt==0&apos; is not redundant" />
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;ppStmt==0&apos; is redundant or there is possible null pointer dereference: ppStmt." verbose="Either the condition &apos;ppStmt==0&apos; is redundant or there is possible null pointer dereference: ppStmt." cwe="476">
            <location file="sqlite3.c" line="118604" info="Null pointer dereference" />
            <location file="sqlite3.c" line="118651" info="Calling function &apos;sqlite3Prepare16&apos;, 5th argument &apos;ppStmt&apos; value is 0" />
            <location file="sqlite3.c" line="118652" info="Assuming that condition &apos;ppStmt==0&apos; is not redundant" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="19476" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="19479" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="21103" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="25490" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="30341" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="32169" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="32317" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="32527" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="32709" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="32745" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="32853" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="32892" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="32942" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="32985" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="33912" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="33921" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="33947" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="34061" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="34325" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="34374" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="34427" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="34430" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="34547" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="34772" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="34791" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="35257" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="35399" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="35530" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="36100" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="36522" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="45643" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="45670" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="46316" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="46376" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="46415" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="46809" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="46852" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="46871" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="46889" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="47037" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="47098" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="47113" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="47114" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="47149" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="47150" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="47184" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="47199" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="50528" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="51074" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="52525" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="52756" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="52757" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="52758" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="52759" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="52760" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="54747" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="56214" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="56942" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="57206" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="58916" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="60782" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="62410" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="62513" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="62613" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="62634" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="70564" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="73823" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="73835" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="73845" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="73850" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="73857" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="73984" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="76522" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="77734" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="77809" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="77834" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="77853" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="77855" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="78391" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="78663" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="78672" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="78724" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="78762" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="78822" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="78870" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="79049" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="79105" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="79118" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="79128" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="79143" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="79191" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="79222" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="79232" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="79250" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="79261" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="79276" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="79283" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="79284" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="79310" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="79311" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="79334" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="79342" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="79349" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="79371" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="79381" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="79409" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="79429" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="80114" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="87348" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="87442" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="87563" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="87628" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="87644" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="87671" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="87678" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="87754" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="87770" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="88767" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="88980" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="89152" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="89390" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="89482" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="89651" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="89658" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="89713" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="89791" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="90043" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="90308" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="90476" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="90647" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="90708" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="90751" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="90825" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="90841" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="90861" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="90910" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="90953" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="93893" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="98792" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="98800" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="99196" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="99566" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="99668" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="100180" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="100357" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="101979" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="104336" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="105888" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="106444" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="106491" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="106519" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="106526" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="106550" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="106552" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="109120" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="109143" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="110079" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="110707" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="113204" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="113212" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="113225" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="116516" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="116625" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="117291" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="117536" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="117550" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="117558" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="117571" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="117609" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="117630" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="117638" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="117660" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="117661" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="117706" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="117718" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="117719" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="117732" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="118511" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="118513" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="118514" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="124998" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="125177" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="127404" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="127416" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="127998" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="128067" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="128424" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="136852" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="144065" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="144384" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="144390" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="144558" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="144570" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="144859" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="144860" />
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="sqlite3.c" line="145113" />
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;pGroup-&gt;nMaxPage&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;pGroup-&gt;nMaxPage&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="sqlite3.c" line="46879" />
            <location file="sqlite3.c" line="46877" />
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;db-&gt;vtabOnConflict&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;db-&gt;vtabOnConflict&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="sqlite3.c" line="86881" />
            <location file="sqlite3.c" line="86879" />
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;db-&gt;suppressErr&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;db-&gt;suppressErr&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="sqlite3.c" line="92057" />
            <location file="sqlite3.c" line="92055" />
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;db-&gt;xAuth&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;db-&gt;xAuth&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="sqlite3.c" line="103843" />
            <location file="sqlite3.c" line="103841" />
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;pTab-&gt;nCol&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;pTab-&gt;nCol&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="sqlite3.c" line="123090" />
            <location file="sqlite3.c" line="123088" />
        </error>
        <error id="selfAssignment" severity="warning" msg="Redundant assignment of &apos;yymsp[0].minor.yy314&apos; to itself." verbose="Redundant assignment of &apos;yymsp[0].minor.yy314&apos; to itself." cwe="398">
            <location file="sqlite3.c" line="141470" />
        </error>
        <error id="duplicateBreak" severity="style" msg="Consecutive return, break, continue, goto or throw statements are unnecessary." verbose="Consecutive return, break, continue, goto or throw statements are unnecessary. The second statement can never be executed, and so should be removed." cwe="561">
            <location file="sqlite3.c" line="83839" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="20437" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;flag_leftjustify&apos; can be reduced." verbose="The scope of the variable &apos;flag_leftjustify&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="26040" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;flag_prefix&apos; can be reduced." verbose="The scope of the variable &apos;flag_prefix&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="26041" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;flag_alternateform&apos; can be reduced." verbose="The scope of the variable &apos;flag_alternateform&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="26042" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;flag_altform2&apos; can be reduced." verbose="The scope of the variable &apos;flag_altform2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="26043" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;flag_zeropad&apos; can be reduced." verbose="The scope of the variable &apos;flag_zeropad&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="26044" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;done&apos; can be reduced." verbose="The scope of the variable &apos;done&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="26046" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cThousand&apos; can be reduced." verbose="The scope of the variable &apos;cThousand&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="26047" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;xtype&apos; can be reduced." verbose="The scope of the variable &apos;xtype&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="26048" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ap&apos; can be reduced." verbose="The scope of the variable &apos;ap&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="26930" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="29710" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pEntry&apos; can be reduced." verbose="The scope of the variable &apos;pEntry&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="30272" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;newOffset&apos; can be reduced." verbose="The scope of the variable &apos;newOffset&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="33896" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nWrite&apos; can be reduced." verbose="The scope of the variable &apos;nWrite&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="34491" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;got&apos; can be reduced." verbose="The scope of the variable &apos;got&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="37057" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="44975" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rc&apos; can be reduced." verbose="The scope of the variable &apos;rc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="44976" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="46577" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="49046" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;aMagic&apos; can be reduced." verbose="The scope of the variable &apos;aMagic&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="49537" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;iHdrOff&apos; can be reduced." verbose="The scope of the variable &apos;iHdrOff&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="51368" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nativeCksum&apos; can be reduced." verbose="The scope of the variable &apos;nativeCksum&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="56320" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cnt&apos; can be reduced." verbose="The scope of the variable &apos;cnt&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="58718" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="60281" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="60297" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="61033" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;x&apos; can be reduced." verbose="The scope of the variable &apos;x&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="61924" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;size&apos; can be reduced." verbose="The scope of the variable &apos;size&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="61926" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nFrag&apos; can be reduced." verbose="The scope of the variable &apos;nFrag&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="62074" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sz&apos; can be reduced." verbose="The scope of the variable &apos;sz&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="62299" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nFreeList&apos; can be reduced." verbose="The scope of the variable &apos;nFreeList&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="64041" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rc&apos; can be reduced." verbose="The scope of the variable &apos;rc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="64042" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;iIdx&apos; can be reduced." verbose="The scope of the variable &apos;iIdx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="65017" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pgno&apos; can be reduced." verbose="The scope of the variable &apos;pgno&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="65499" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pgno&apos; can be reduced." verbose="The scope of the variable &apos;pgno&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="65524" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rc&apos; can be reduced." verbose="The scope of the variable &apos;rc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="65525" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="66935" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pIns&apos; can be reduced." verbose="The scope of the variable &apos;pIns&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="66937" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;destMode&apos; can be reduced." verbose="The scope of the variable &apos;destMode&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="70737" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pgszSrc&apos; can be reduced." verbose="The scope of the variable &apos;pgszSrc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="70738" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pgszDest&apos; can be reduced." verbose="The scope of the variable &apos;pgszDest&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="70739" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pp&apos; can be reduced." verbose="The scope of the variable &apos;pp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="70990" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pOp&apos; can be reduced." verbose="The scope of the variable &apos;pOp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="73998" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rc2&apos; can be reduced." verbose="The scope of the variable &apos;rc2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="75502" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rc&apos; can be reduced." verbose="The scope of the variable &apos;rc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="75584" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rc&apos; can be reduced." verbose="The scope of the variable &apos;rc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="78485" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pVar&apos; can be reduced." verbose="The scope of the variable &apos;pVar&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="79050" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="79726" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;idx&apos; can be reduced." verbose="The scope of the variable &apos;idx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="82059" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pColl&apos; can be reduced." verbose="The scope of the variable &apos;pColl&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="82060" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;bRev&apos; can be reduced." verbose="The scope of the variable &apos;bRev&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="82061" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;db&apos; can be reduced." verbose="The scope of the variable &apos;db&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="87646" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;iBuf&apos; can be reduced." verbose="The scope of the variable &apos;iBuf&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="88382" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rc&apos; can be reduced." verbose="The scope of the variable &apos;rc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="88392" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pgsz&apos; can be reduced." verbose="The scope of the variable &apos;pgsz&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="88732" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="88733" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="88994" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;bFlush&apos; can be reduced." verbose="The scope of the variable &apos;bFlush&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="89569" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;iTask&apos; can be reduced." verbose="The scope of the variable &apos;iTask&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="90303" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rc&apos; can be reduced." verbose="The scope of the variable &apos;rc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="91031" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="91062" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pItem&apos; can be reduced." verbose="The scope of the variable &apos;pItem&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="91063" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rc&apos; can be reduced." verbose="The scope of the variable &apos;rc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="91133" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="91996" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pEList&apos; can be reduced." verbose="The scope of the variable &apos;pEList&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="92109" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pDup&apos; can be reduced." verbose="The scope of the variable &apos;pDup&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="92135" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="92614" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="95837" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;minLru&apos; can be reduced." verbose="The scope of the variable &apos;minLru&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="95838" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;idxLru&apos; can be reduced." verbose="The scope of the variable &apos;idxLru&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="95839" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nextCase&apos; can be reduced." verbose="The scope of the variable &apos;nextCase&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="96736" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;inReg&apos; can be reduced." verbose="The scope of the variable &apos;inReg&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="96909" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="97001" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;iVar&apos; can be reduced." verbose="The scope of the variable &apos;iVar&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="97425" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pL&apos; can be reduced." verbose="The scope of the variable &apos;pL&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="97426" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pCol&apos; can be reduced." verbose="The scope of the variable &apos;pCol&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="97771" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pItem&apos; can be reduced." verbose="The scope of the variable &apos;pItem&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="97916" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="97917" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;len&apos; can be reduced." verbose="The scope of the variable &apos;len&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="98067" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;zRet&apos; can be reduced." verbose="The scope of the variable &apos;zRet&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="98068" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dist&apos; can be reduced." verbose="The scope of the variable &apos;dist&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="98188" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;len&apos; can be reduced." verbose="The scope of the variable &apos;len&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="98190" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;zRet&apos; can be reduced." verbose="The scope of the variable &apos;zRet&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="98191" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;jZeroRows&apos; can be reduced." verbose="The scope of the variable &apos;jZeroRows&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="99821" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="100225" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="100293" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;v&apos; can be reduced." verbose="The scope of the variable &apos;v&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="100295" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;zSql&apos; can be reduced." verbose="The scope of the variable &apos;zSql&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="100702" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;iSrc&apos; can be reduced." verbose="The scope of the variable &apos;iSrc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="101493" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="102139" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="102189" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;zType&apos; can be reduced." verbose="The scope of the variable &apos;zType&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="102680" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pCol&apos; can be reduced." verbose="The scope of the variable &apos;pCol&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="102849" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="103531" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="103777" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="105407" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pItem&apos; can be reduced." verbose="The scope of the variable &apos;pItem&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="105408" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="105571" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="105786" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="105970" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pColl2&apos; can be reduced." verbose="The scope of the variable &apos;pColl2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="106131" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;h&apos; can be reduced." verbose="The scope of the variable &apos;h&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="106435" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;len&apos; can be reduced." verbose="The scope of the variable &apos;len&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="107617" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;zHaystack&apos; can be reduced." verbose="The scope of the variable &apos;zHaystack&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="107706" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;zNeedle&apos; can be reduced." verbose="The scope of the variable &apos;zNeedle&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="107707" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;isText&apos; can be reduced." verbose="The scope of the variable &apos;isText&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="107712" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="107754" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;z1&apos; can be reduced." verbose="The scope of the variable &apos;z1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="107940" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="107942" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;z1&apos; can be reduced." verbose="The scope of the variable &apos;z1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="107959" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="107961" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;bMatch&apos; can be reduced." verbose="The scope of the variable &apos;bMatch&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="108215" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="108555" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="108650" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;flags&apos; can be reduced." verbose="The scope of the variable &apos;flags&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="108788" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="108789" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;zVal&apos; can be reduced." verbose="The scope of the variable &apos;zVal&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="109137" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;zSep&apos; can be reduced." verbose="The scope of the variable &apos;zSep&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="109139" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nVal&apos; can be reduced." verbose="The scope of the variable &apos;nVal&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="109140" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nSep&apos; can be reduced." verbose="The scope of the variable &apos;nSep&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="109140" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;zColl&apos; can be reduced." verbose="The scope of the variable &apos;zColl&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="109880" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pWInfo&apos; can be reduced." verbose="The scope of the variable &apos;pWInfo&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="109965" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pEq&apos; can be reduced." verbose="The scope of the variable &apos;pEq&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="110024" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pDb&apos; can be reduced." verbose="The scope of the variable &apos;pDb&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="111096" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;memId&apos; can be reduced." verbose="The scope of the variable &apos;memId&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="111097" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;x&apos; can be reduced." verbose="The scope of the variable &apos;x&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="112348" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;addr2&apos; can be reduced." verbose="The scope of the variable &apos;addr2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="112799" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rc&apos; can be reduced." verbose="The scope of the variable &apos;rc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="114603" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rc&apos; can be reduced." verbose="The scope of the variable &apos;rc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="115575" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;aOp&apos; can be reduced." verbose="The scope of the variable &apos;aOp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="115759" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sz&apos; can be reduced." verbose="The scope of the variable &apos;sz&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="116134" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pTab&apos; can be reduced." verbose="The scope of the variable &apos;pTab&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="116443" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="116479" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pPrior&apos; can be reduced." verbose="The scope of the variable &apos;pPrior&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="116839" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;r1&apos; can be reduced." verbose="The scope of the variable &apos;r1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="116842" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="118886" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;iCol&apos; can be reduced." verbose="The scope of the variable &apos;iCol&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="118969" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="119788" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;addrOnce&apos; can be reduced." verbose="The scope of the variable &apos;addrOnce&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="119904" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="120061" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pColl&apos; can be reduced." verbose="The scope of the variable &apos;pColl&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="120466" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="120468" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="120480" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m&apos; can be reduced." verbose="The scope of the variable &apos;m&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="120480" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;v&apos; can be reduced." verbose="The scope of the variable &apos;v&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="120580" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;iLimit&apos; can be reduced." verbose="The scope of the variable &apos;iLimit&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="120581" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;iOffset&apos; can be reduced." verbose="The scope of the variable &apos;iOffset&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="120582" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="121523" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pWhere&apos; can be reduced." verbose="The scope of the variable &apos;pWhere&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="122111" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pNew&apos; can be reduced." verbose="The scope of the variable &apos;pNew&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="122537" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="123003" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pExpr&apos; can be reduced." verbose="The scope of the variable &apos;pExpr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="123008" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;iDb&apos; can be reduced." verbose="The scope of the variable &apos;iDb&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="123171" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="125287" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;iDb&apos; can be reduced." verbose="The scope of the variable &apos;iDb&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="125622" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pWhen&apos; can be reduced." verbose="The scope of the variable &apos;pWhen&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="125772" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;iEndTrigger&apos; can be reduced." verbose="The scope of the variable &apos;iEndTrigger&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="125777" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="128221" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;z&apos; can be reduced." verbose="The scope of the variable &apos;z&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="128412" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="130215" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pOp&apos; can be reduced." verbose="The scope of the variable &apos;pOp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="130450" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;jmp1&apos; can be reduced." verbose="The scope of the variable &apos;jmp1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="131093" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="131576" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cnt&apos; can be reduced." verbose="The scope of the variable &apos;cnt&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="131577" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pAndTerm&apos; can be reduced." verbose="The scope of the variable &apos;pAndTerm&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="132003" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="132004" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;idxNew&apos; can be reduced." verbose="The scope of the variable &apos;idxNew&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="132609" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pNewTerm&apos; can be reduced." verbose="The scope of the variable &apos;pNewTerm&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="132610" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="132838" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pColRef&apos; can be reduced." verbose="The scope of the variable &apos;pColRef&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="132882" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pTerm&apos; can be reduced." verbose="The scope of the variable &apos;pTerm&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="132883" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;iCur&apos; can be reduced." verbose="The scope of the variable &apos;iCur&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="133117" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;iColumn&apos; can be reduced." verbose="The scope of the variable &apos;iColumn&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="133118" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nTo&apos; can be reduced." verbose="The scope of the variable &apos;nTo&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="136815" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="137190" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;addr&apos; can be reduced." verbose="The scope of the variable &apos;addr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="137928" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;k&apos; can be reduced." verbose="The scope of the variable &apos;k&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="138030" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;last&apos; can be reduced." verbose="The scope of the variable &apos;last&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="138030" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="139990" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;yyact&apos; can be reduced." verbose="The scope of the variable &apos;yyact&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="141896" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="142350" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="142350" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;zKW&apos; can be reduced." verbose="The scope of the variable &apos;zKW&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="sqlite3.c" line="142351" />
        </error>
        <error id="pointerSize" severity="warning" msg="Size of pointer &apos;zExtra&apos; used instead of size of its data." verbose="Size of pointer &apos;zExtra&apos; used instead of size of its data. This is likely to lead to a buffer overflow. You probably intend to write &apos;sizeof(*zExtra)&apos;." cwe="467">
            <location file="sqlite3.c" line="103239" />
        </error>
        <error id="signConversion" severity="warning" msg="Suspicious code: sign conversion of - in calculation, even though - can have a negative value" verbose="Suspicious code: sign conversion of - in calculation, even though - can have a negative value" cwe="195">
            <location file="sqlite3.c" line="137447" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_rtree_geometry::pContext&apos; is never used." verbose="struct member &apos;sqlite3_rtree_geometry::pContext&apos; is never used." cwe="563">
            <location file="sqlite3.c" line="9886" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_rtree_geometry::nParam&apos; is never used." verbose="struct member &apos;sqlite3_rtree_geometry::nParam&apos; is never used." cwe="563">
            <location file="sqlite3.c" line="9887" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_rtree_geometry::aParam&apos; is never used." verbose="struct member &apos;sqlite3_rtree_geometry::aParam&apos; is never used." cwe="563">
            <location file="sqlite3.c" line="9888" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_rtree_geometry::xDelUser&apos; is never used." verbose="struct member &apos;sqlite3_rtree_geometry::xDelUser&apos; is never used." cwe="563">
            <location file="sqlite3.c" line="9890" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_rtree_query_info::pContext&apos; is never used." verbose="struct member &apos;sqlite3_rtree_query_info::pContext&apos; is never used." cwe="563">
            <location file="sqlite3.c" line="9918" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_rtree_query_info::nParam&apos; is never used." verbose="struct member &apos;sqlite3_rtree_query_info::nParam&apos; is never used." cwe="563">
            <location file="sqlite3.c" line="9919" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_rtree_query_info::aParam&apos; is never used." verbose="struct member &apos;sqlite3_rtree_query_info::aParam&apos; is never used." cwe="563">
            <location file="sqlite3.c" line="9920" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_rtree_query_info::xDelUser&apos; is never used." verbose="struct member &apos;sqlite3_rtree_query_info::xDelUser&apos; is never used." cwe="563">
            <location file="sqlite3.c" line="9922" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_rtree_query_info::aCoord&apos; is never used." verbose="struct member &apos;sqlite3_rtree_query_info::aCoord&apos; is never used." cwe="563">
            <location file="sqlite3.c" line="9923" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_rtree_query_info::anQueue&apos; is never used." verbose="struct member &apos;sqlite3_rtree_query_info::anQueue&apos; is never used." cwe="563">
            <location file="sqlite3.c" line="9924" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_rtree_query_info::nCoord&apos; is never used." verbose="struct member &apos;sqlite3_rtree_query_info::nCoord&apos; is never used." cwe="563">
            <location file="sqlite3.c" line="9925" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_rtree_query_info::mxLevel&apos; is never used." verbose="struct member &apos;sqlite3_rtree_query_info::mxLevel&apos; is never used." cwe="563">
            <location file="sqlite3.c" line="9927" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_rtree_query_info::rParentScore&apos; is never used." verbose="struct member &apos;sqlite3_rtree_query_info::rParentScore&apos; is never used." cwe="563">
            <location file="sqlite3.c" line="9929" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_rtree_query_info::eParentWithin&apos; is never used." verbose="struct member &apos;sqlite3_rtree_query_info::eParentWithin&apos; is never used." cwe="563">
            <location file="sqlite3.c" line="9930" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_rtree_query_info::eWithin&apos; is never used." verbose="struct member &apos;sqlite3_rtree_query_info::eWithin&apos; is never used." cwe="563">
            <location file="sqlite3.c" line="9931" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_rtree_query_info::rScore&apos; is never used." verbose="struct member &apos;sqlite3_rtree_query_info::rScore&apos; is never used." cwe="563">
            <location file="sqlite3.c" line="9932" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;sqlite3_rtree_query_info::apSqlParam&apos; is never used." verbose="struct member &apos;sqlite3_rtree_query_info::apSqlParam&apos; is never used." cwe="563">
            <location file="sqlite3.c" line="9934" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;Fts5ExtensionApi::xUserData&apos; is never used." verbose="struct member &apos;Fts5ExtensionApi::xUserData&apos; is never used." cwe="563">
            <location file="sqlite3.c" line="11542" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;Fts5ExtensionApi::xColumnCount&apos; is never used." verbose="struct member &apos;Fts5ExtensionApi::xColumnCount&apos; is never used." cwe="563">
            <location file="sqlite3.c" line="11544" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;Fts5ExtensionApi::xRowCount&apos; is never used." verbose="struct member &apos;Fts5ExtensionApi::xRowCount&apos; is never used." cwe="563">
            <location file="sqlite3.c" line="11545" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;Fts5ExtensionApi::xColumnTotalSize&apos; is never used." verbose="struct member &apos;Fts5ExtensionApi::xColumnTotalSize&apos; is never used." cwe="563">
            <location file="sqlite3.c" line="11546" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;Fts5ExtensionApi::xTokenize&apos; is never used." verbose="struct member &apos;Fts5ExtensionApi::xTokenize&apos; is never used." cwe="563">
            <location file="sqlite3.c" line="11548" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;Fts5ExtensionApi::xPhraseCount&apos; is never used." verbose="struct member &apos;Fts5ExtensionApi::xPhraseCount&apos; is never used." cwe="563">
            <location file="sqlite3.c" line="11554" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;Fts5ExtensionApi::xPhraseSize&apos; is never used." verbose="struct member &apos;Fts5ExtensionApi::xPhraseSize&apos; is never used." cwe="563">
            <location file="sqlite3.c" line="11555" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;Fts5ExtensionApi::xInstCount&apos; is never used." verbose="struct member &apos;Fts5ExtensionApi::xInstCount&apos; is never used." cwe="563">
            <location file="sqlite3.c" line="11557" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;Fts5ExtensionApi::xInst&apos; is never used." verbose="struct member &apos;Fts5ExtensionApi::xInst&apos; is never used." cwe="563">
            <location file="sqlite3.c" line="11558" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;Fts5ExtensionApi::xColumnText&apos; is never used." verbose="struct member &apos;Fts5ExtensionApi::xColumnText&apos; is never used." cwe="563">
            <location file="sqlite3.c" line="11561" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;Fts5ExtensionApi::xColumnSize&apos; is never used." verbose="struct member &apos;Fts5ExtensionApi::xColumnSize&apos; is never used." cwe="563">
            <location file="sqlite3.c" line="11562" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;Fts5ExtensionApi::xQueryPhrase&apos; is never used." verbose="struct member &apos;Fts5ExtensionApi::xQueryPhrase&apos; is never used." cwe="563">
            <location file="sqlite3.c" line="11564" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;Fts5ExtensionApi::xSetAuxdata&apos; is never used." verbose="struct member &apos;Fts5ExtensionApi::xSetAuxdata&apos; is never used." cwe="563">
            <location file="sqlite3.c" line="11567" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;Fts5ExtensionApi::xGetAuxdata&apos; is never used." verbose="struct member &apos;Fts5ExtensionApi::xGetAuxdata&apos; is never used." cwe="563">
            <location file="sqlite3.c" line="11568" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;Fts5ExtensionApi::xPhraseFirst&apos; is never used." verbose="struct member &apos;Fts5ExtensionApi::xPhraseFirst&apos; is never used." cwe="563">
            <location file="sqlite3.c" line="11570" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;Fts5ExtensionApi::xPhraseNext&apos; is never used." verbose="struct member &apos;Fts5ExtensionApi::xPhraseNext&apos; is never used." cwe="563">
            <location file="sqlite3.c" line="11571" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;Fts5ExtensionApi::xPhraseFirstColumn&apos; is never used." verbose="struct member &apos;Fts5ExtensionApi::xPhraseFirstColumn&apos; is never used." cwe="563">
            <location file="sqlite3.c" line="11573" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;Fts5ExtensionApi::xPhraseNextColumn&apos; is never used." verbose="struct member &apos;Fts5ExtensionApi::xPhraseNextColumn&apos; is never used." cwe="563">
            <location file="sqlite3.c" line="11574" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;fts5_tokenizer::xTokenize&apos; is never used." verbose="struct member &apos;fts5_tokenizer::xTokenize&apos; is never used." cwe="563">
            <location file="sqlite3.c" line="11778" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;fts5_api::xCreateTokenizer&apos; is never used." verbose="struct member &apos;fts5_api::xCreateTokenizer&apos; is never used." cwe="563">
            <location file="sqlite3.c" line="11815" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;fts5_api::xFindTokenizer&apos; is never used." verbose="struct member &apos;fts5_api::xFindTokenizer&apos; is never used." cwe="563">
            <location file="sqlite3.c" line="11824" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;fts5_api::xCreateFunction&apos; is never used." verbose="struct member &apos;fts5_api::xCreateFunction&apos; is never used." cwe="563">
            <location file="sqlite3.c" line="11832" />
        </error>
        <error id="unusedStructMember" severity="style" msg="union member &apos;Anonymous0::notUsed1&apos; is never used." verbose="union member &apos;Anonymous0::notUsed1&apos; is never used." cwe="563">
            <location file="sqlite3.c" line="15288" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;IndexSample::anLt&apos; is never used." verbose="struct member &apos;IndexSample::anLt&apos; is never used." cwe="563">
            <location file="sqlite3.c" line="16099" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;Sqlite3Config::mxStrlen&apos; is never used." verbose="struct member &apos;Sqlite3Config::mxStrlen&apos; is never used." cwe="563">
            <location file="sqlite3.c" line="17156" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;Sqlite3Config::pHeap&apos; is never used." verbose="struct member &apos;Sqlite3Config::pHeap&apos; is never used." cwe="563">
            <location file="sqlite3.c" line="17164" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;Sqlite3Config::nHeap&apos; is never used." verbose="struct member &apos;Sqlite3Config::nHeap&apos; is never used." cwe="563">
            <location file="sqlite3.c" line="17165" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;Sqlite3Config::mnReq&apos; is never used." verbose="struct member &apos;Sqlite3Config::mnReq&apos; is never used." cwe="563">
            <location file="sqlite3.c" line="17166" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;Sqlite3Config::mxReq&apos; is never used." verbose="struct member &apos;Sqlite3Config::mxReq&apos; is never used." cwe="563">
            <location file="sqlite3.c" line="17166" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;Sqlite3Config::mxParserStack&apos; is never used." verbose="struct member &apos;Sqlite3Config::mxParserStack&apos; is never used." cwe="563">
            <location file="sqlite3.c" line="17172" />
        </error>
        <error id="unusedStructMember" severity="style" msg="union member &apos;Anonymous8::pCCurHint&apos; is never used." verbose="union member &apos;Anonymous8::pCCurHint&apos; is never used." cwe="563">
            <location file="sqlite3.c" line="17238" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;ScanStatus::addrExplain&apos; is never used." verbose="struct member &apos;ScanStatus::addrExplain&apos; is never used." cwe="563">
            <location file="sqlite3.c" line="18967" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;ScanStatus::addrLoop&apos; is never used." verbose="struct member &apos;ScanStatus::addrLoop&apos; is never used." cwe="563">
            <location file="sqlite3.c" line="18968" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;ScanStatus::addrVisit&apos; is never used." verbose="struct member &apos;ScanStatus::addrVisit&apos; is never used." cwe="563">
            <location file="sqlite3.c" line="18969" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;ScanStatus::iSelectID&apos; is never used." verbose="struct member &apos;ScanStatus::iSelectID&apos; is never used." cwe="563">
            <location file="sqlite3.c" line="18970" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;ScanStatus::nEst&apos; is never used." verbose="struct member &apos;ScanStatus::nEst&apos; is never used." cwe="563">
            <location file="sqlite3.c" line="18971" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;PreUpdate::aRecord&apos; is never used." verbose="struct member &apos;PreUpdate::aRecord&apos; is never used." cwe="563">
            <location file="sqlite3.c" line="19066" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;PreUpdate::pNewUnpacked&apos; is never used." verbose="struct member &apos;PreUpdate::pNewUnpacked&apos; is never used." cwe="563">
            <location file="sqlite3.c" line="19069" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;PreUpdate::iNewReg&apos; is never used." verbose="struct member &apos;PreUpdate::iNewReg&apos; is never used." cwe="563">
            <location file="sqlite3.c" line="19070" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;PreUpdate::iKey1&apos; is never used." verbose="struct member &apos;PreUpdate::iKey1&apos; is never used." cwe="563">
            <location file="sqlite3.c" line="19071" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;PreUpdate::iKey2&apos; is never used." verbose="struct member &apos;PreUpdate::iKey2&apos; is never used." cwe="563">
            <location file="sqlite3.c" line="19072" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;PreUpdate::aNew&apos; is never used." verbose="struct member &apos;PreUpdate::aNew&apos; is never used." cwe="563">
            <location file="sqlite3.c" line="19073" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;PreUpdate::pPk&apos; is never used." verbose="struct member &apos;PreUpdate::pPk&apos; is never used." cwe="563">
            <location file="sqlite3.c" line="19075" />
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;vxworksFileId::zCanonicalName&apos; is never used." verbose="struct member &apos;vxworksFileId::zCanonicalName&apos; is never used." cwe="563">
            <location file="sqlite3.c" line="31612" />
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;cSep&apos; is assigned a value that is never used." verbose="Variable &apos;cSep&apos; is assigned a value that is never used." cwe="563">
            <location file="sqlite3.c" line="117519" />
        </error>
        <error id="assertWithSideEffect" severity="warning" msg="Assert statement calls a function which may have desired side effects: &apos;sqlite3ExprIsInteger&apos;." verbose="Non-pure function: &apos;sqlite3ExprIsInteger&apos; is called inside assert statement. Assert statements are removed from release builds so the code inside assert statement is not executed. If the code is needed also in release builds, this is a bug." cwe="398">
            <location file="sqlite3.c" line="92042" />
        </error>
        <error id="assertWithSideEffect" severity="warning" msg="Assert statement calls a function which may have desired side effects: &apos;sqlite3GetInt32&apos;." verbose="Non-pure function: &apos;sqlite3GetInt32&apos; is called inside assert statement. Assert statements are removed from release builds so the code inside assert statement is not executed. If the code is needed also in release builds, this is a bug." cwe="398">
            <location file="sqlite3.c" line="94652" />
        </error>
        <error id="assertWithSideEffect" severity="warning" msg="Assert statement calls a function which may have desired side effects: &apos;sqlite3_value_blob&apos;." verbose="Non-pure function: &apos;sqlite3_value_blob&apos; is called inside assert statement. Assert statements are removed from release builds so the code inside assert statement is not executed. If the code is needed also in release builds, this is a bug." cwe="398">
            <location file="sqlite3.c" line="108537" />
        </error>
        <error id="assertWithSideEffect" severity="warning" msg="Assert statement calls a function which may have desired side effects: &apos;sqlite3_value_blob&apos;." verbose="Non-pure function: &apos;sqlite3_value_blob&apos; is called inside assert statement. Assert statements are removed from release builds so the code inside assert statement is not executed. If the code is needed also in release builds, this is a bug." cwe="398">
            <location file="sqlite3.c" line="108657" />
        </error>
        <error id="assignmentInAssert" severity="warning" msg="Assert statement modifies &apos;x&apos;." verbose="Variable &apos;x&apos; is modified insert assert statement. Assert statements are removed from release builds so the code inside assert statement is not executed. If the code is needed also in release builds, this is a bug." cwe="398">
            <location file="sqlite3.c" line="147085" />
        </error>
        <error id="arrayIndexThenCheck" severity="style" msg="Array index &apos;i&apos; is used before limits check." verbose="Defensive programming: The variable &apos;i&apos; is used as an array index before it is checked that is within limits. This can mean that the array might be accessed out of bounds. Reorder conditions such as &apos;(a[i] &amp;&amp; i &lt; 10)&apos; to &apos;(i &lt; 10 &amp;&amp; a[i])&apos;. That way the array will not be accessed if the index is out of limits." cwe="398">
            <location file="sqlite3.c" line="29214" />
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &apos;&amp;&apos; and &apos;?&apos;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &apos;&apos;a&amp;b?c:d&apos;&apos; should be written as either &apos;&apos;(a&amp;b)?c:d&apos;&apos; or &apos;&apos;a&amp;(b?c:d)&apos;&apos;." cwe="783">
            <location file="sqlite3.c" line="88671" />
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &apos;&amp;&apos; and &apos;?&apos;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &apos;&apos;a&amp;b?c:d&apos;&apos; should be written as either &apos;&apos;(a&amp;b)?c:d&apos;&apos; or &apos;&apos;a&amp;(b?c:d)&apos;&apos;." cwe="783">
            <location file="sqlite3.c" line="101973" />
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: szHdr" verbose="Uninitialized variable: szHdr" cwe="908">
            <location file="sqlite3.c" line="76552" />
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: szHdr" verbose="Uninitialized variable: szHdr" cwe="908">
            <location file="sqlite3.c" line="76554" />
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: serial_type" verbose="Uninitialized variable: serial_type" cwe="908">
            <location file="sqlite3.c" line="76563" />
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s1" verbose="Uninitialized variable: s1" cwe="908">
            <location file="sqlite3.c" line="76997" />
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: serial_type" verbose="Uninitialized variable: serial_type" cwe="908">
            <location file="sqlite3.c" line="77283" />
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: szHdr" verbose="Uninitialized variable: szHdr" cwe="908">
            <location file="sqlite3.c" line="77407" />
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: szHdr" verbose="Uninitialized variable: szHdr" cwe="908">
            <location file="sqlite3.c" line="77413" />
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: typeRowid" verbose="Uninitialized variable: typeRowid" cwe="908">
            <location file="sqlite3.c" line="77425" />
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: szHdr" verbose="Uninitialized variable: szHdr" cwe="908">
            <location file="sqlite3.c" line="77427" />
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: typeRowid" verbose="Uninitialized variable: typeRowid" cwe="908">
            <location file="sqlite3.c" line="77432" />
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n1" verbose="Uninitialized variable: n1" cwe="908">
            <location file="sqlite3.c" line="88621" />
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n1" verbose="Uninitialized variable: n1" cwe="908">
            <location file="sqlite3.c" line="88623" />
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n2" verbose="Uninitialized variable: n2" cwe="908">
            <location file="sqlite3.c" line="88623" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ExitException&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ExitException&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="tclap/Arg.h" file="../smarttrafficmeter/tclap/ArgException.h" line="189" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ExitException&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ExitException&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="tclap/ArgException.h" line="189" />
        </error>
        <error id="duplInheritedMember" severity="warning" msg="The class &apos;MultiSwitchArg&apos; defines member variable with name &apos;_value&apos; also defined in its parent class &apos;SwitchArg&apos;." verbose="The class &apos;MultiSwitchArg&apos; defines member variable with name &apos;_value&apos; also defined in its parent class &apos;SwitchArg&apos;." cwe="398">
            <location file0="tclap/CmdLine.h" file="../smarttrafficmeter/tclap/SwitchArg.h" line="46" />
            <location file0="tclap/CmdLine.h" file="../smarttrafficmeter/tclap/MultiSwitchArg.h" line="46" />
        </error>
        <error id="duplInheritedMember" severity="warning" msg="The class &apos;MultiSwitchArg&apos; defines member variable with name &apos;_default&apos; also defined in its parent class &apos;SwitchArg&apos;." verbose="The class &apos;MultiSwitchArg&apos; defines member variable with name &apos;_default&apos; also defined in its parent class &apos;SwitchArg&apos;." cwe="398">
            <location file0="tclap/CmdLine.h" file="../smarttrafficmeter/tclap/SwitchArg.h" line="52" />
            <location file0="tclap/CmdLine.h" file="../smarttrafficmeter/tclap/MultiSwitchArg.h" line="52" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ExitException&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ExitException&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="tclap/CmdLine.h" file="../smarttrafficmeter/tclap/ArgException.h" line="189" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ValuesConstraint&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ValuesConstraint&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="tclap/CmdLine.h" file="../smarttrafficmeter/tclap/ValuesConstraint.h" line="51" />
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398">
            <location file0="tclap/CmdLine.h" file="../smarttrafficmeter/tclap/StdOutput.h" line="179" />
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398">
            <location file0="tclap/CmdLine.h" file="../smarttrafficmeter/tclap/StdOutput.h" line="217" />
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398">
            <location file="tclap/CmdLine.h" line="420" />
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398">
            <location file="tclap/CmdLine.h" line="459" />
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398">
            <location file="tclap/CmdLine.h" line="528" />
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398">
            <location file="tclap/CmdLine.h" line="620" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ExitException&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ExitException&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="tclap/DocBookOutput.h" file="../smarttrafficmeter/tclap/ArgException.h" line="189" />
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398">
            <location file="tclap/DocBookOutput.h" line="139" />
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398">
            <location file="tclap/DocBookOutput.h" line="158" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ExitException&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ExitException&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="tclap/IgnoreRestVisitor.h" file="../smarttrafficmeter/tclap/ArgException.h" line="189" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ExitException&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ExitException&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="tclap/MultiArg.h" file="../smarttrafficmeter/tclap/ArgException.h" line="189" />
        </error>
        <error id="duplInheritedMember" severity="warning" msg="The class &apos;MultiSwitchArg&apos; defines member variable with name &apos;_value&apos; also defined in its parent class &apos;SwitchArg&apos;." verbose="The class &apos;MultiSwitchArg&apos; defines member variable with name &apos;_value&apos; also defined in its parent class &apos;SwitchArg&apos;." cwe="398">
            <location file0="tclap/MultiSwitchArg.h" file="../smarttrafficmeter/tclap/SwitchArg.h" line="46" />
            <location file="tclap/MultiSwitchArg.h" line="46" />
        </error>
        <error id="duplInheritedMember" severity="warning" msg="The class &apos;MultiSwitchArg&apos; defines member variable with name &apos;_default&apos; also defined in its parent class &apos;SwitchArg&apos;." verbose="The class &apos;MultiSwitchArg&apos; defines member variable with name &apos;_default&apos; also defined in its parent class &apos;SwitchArg&apos;." cwe="398">
            <location file0="tclap/MultiSwitchArg.h" file="../smarttrafficmeter/tclap/SwitchArg.h" line="52" />
            <location file="tclap/MultiSwitchArg.h" line="52" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ExitException&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ExitException&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="tclap/MultiSwitchArg.h" file="../smarttrafficmeter/tclap/ArgException.h" line="189" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ExitException&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ExitException&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="tclap/StdOutput.h" file="../smarttrafficmeter/tclap/ArgException.h" line="189" />
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398">
            <location file="tclap/StdOutput.h" line="179" />
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398">
            <location file="tclap/StdOutput.h" line="217" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ExitException&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ExitException&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="tclap/SwitchArg.h" file="../smarttrafficmeter/tclap/ArgException.h" line="189" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ExitException&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ExitException&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="tclap/UnlabeledMultiArg.h" file="../smarttrafficmeter/tclap/ArgException.h" line="189" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ExitException&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ExitException&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="tclap/UnlabeledValueArg.h" file="../smarttrafficmeter/tclap/ArgException.h" line="189" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ExitException&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ExitException&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="tclap/ValueArg.h" file="../smarttrafficmeter/tclap/ArgException.h" line="189" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ValuesConstraint&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ValuesConstraint&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="tclap/ValuesConstraint.h" line="51" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ExitException&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ExitException&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="tclap/XorHandler.h" file="../smarttrafficmeter/tclap/ArgException.h" line="189" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;count&apos; can be reduced." verbose="The scope of the variable &apos;count&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="tclap/ZshCompletionOutput.h" line="172" />
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;xversion&apos; is assigned a value that is never used." verbose="Variable &apos;xversion&apos; is assigned a value that is never used." cwe="563">
            <location file="tclap/ZshCompletionOutput.h" line="116" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ExitException&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ExitException&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="tclap/ZshCompletionOutput.h" file="../smarttrafficmeter/tclap/ArgException.h" line="189" />
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;mutex&apos; should be passed by reference." verbose="Parameter &apos;mutex&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." cwe="398">
            <location file="tclap/ZshCompletionOutput.h" line="196" />
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398">
            <location file="tclap/ZshCompletionOutput.h" line="124" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Path&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Path&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="url/Path.h" line="41" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Path&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Path&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="url/Url.h" file="url/Path.h" line="41" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;BadUrl&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;BadUrl&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="url/Url.h" line="213" />
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;UrlParseError&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;UrlParseError&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="url/Url.h" line="222" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;Server&apos; is never used." verbose="The function &apos;Server&apos; is never used." cwe="561">
            <location file="serverhttp/server_http.hpp" line="693" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;Thread&apos; is never used." verbose="The function &apos;Thread&apos; is never used." cwe="561">
            <location file="ServerThread.cpp" line="49" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;asFloat&apos; is never used." verbose="The function &apos;asFloat&apos; is never used." cwe="561">
            <location file="jsoncpp.cpp" line="3283" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;as_string&apos; is never used." verbose="The function &apos;as_string&apos; is never used." cwe="561">
            <location file="url/Url.h" line="314" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;depth&apos; is never used." verbose="The function &apos;depth&apos; is never used." cwe="561">
            <location file="url/Path.h" line="89" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;double_to_string&apos; is never used." verbose="The function &apos;double_to_string&apos; is never used." cwe="561">
            <location file="Utils.cpp" line="399" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;dropNullPlaceholders&apos; is never used." verbose="The function &apos;dropNullPlaceholders&apos; is never used." cwe="561">
            <location file="jsoncpp.cpp" line="4411" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;enableYAMLCompatibility&apos; is never used." verbose="The function &apos;enableYAMLCompatibility&apos; is never used." cwe="561">
            <location file="jsoncpp.cpp" line="4409" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;escape_reserved_unsafe&apos; is never used." verbose="The function &apos;escape_reserved_unsafe&apos; is never used." cwe="561">
            <location file="Url.cpp" line="690" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;getExceptionHandling&apos; is never used." verbose="The function &apos;getExceptionHandling&apos; is never used." cwe="561">
            <location file="tclap/CmdLine.h" line="613" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;getFormatedErrorMessages&apos; is never used." verbose="The function &apos;getFormatedErrorMessages&apos; is never used." cwe="561">
            <location file="jsoncpp.cpp" line="1040" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;getOutput&apos; is never used." verbose="The function &apos;getOutput&apos; is never used." cwe="561">
            <location file="tclap/CmdLine.h" line="560" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;getStructuredErrors&apos; is never used." verbose="The function &apos;getStructuredErrors&apos; is never used." cwe="561">
            <location file="jsoncpp.cpp" line="1060" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;gz_decompress&apos; is never used." verbose="The function &apos;gz_decompress&apos; is never used." cwe="561">
            <location file="Utils.cpp" line="2320" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;isBool&apos; is never used." verbose="The function &apos;isBool&apos; is never used." cwe="561">
            <location file="jsoncpp.cpp" line="3725" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;isConvertibleTo&apos; is never used." verbose="The function &apos;isConvertibleTo&apos; is never used." cwe="561">
            <location file="jsoncpp.cpp" line="3325" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;isIgnoreable&apos; is never used." verbose="The function &apos;isIgnoreable&apos; is never used." cwe="561">
            <location file="tclap/Arg.h" line="584" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;isIntegral&apos; is never used." verbose="The function &apos;isIntegral&apos; is never used." cwe="561">
            <location file="jsoncpp.cpp" line="3809" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;isString&apos; is never used." verbose="The function &apos;isString&apos; is never used." cwe="561">
            <location file="jsoncpp.cpp" line="3821" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;make&apos; is never used." verbose="The function &apos;make&apos; is never used." cwe="561">
            <location file="jsoncpp.cpp" line="4045" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;omitEndingLineFeed&apos; is never used." verbose="The function &apos;omitEndingLineFeed&apos; is never used." cwe="561">
            <location file="jsoncpp.cpp" line="4413" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;operator&lt;&lt;&apos; is never used." verbose="The function &apos;operator&lt;&lt;&apos; is never used." cwe="561">
            <location file="Url.cpp" line="351" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;operator&gt;&gt;&apos; is never used." verbose="The function &apos;operator&gt;&gt;&apos; is never used." cwe="561">
            <location file="jsoncpp.cpp" line="2239" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;parse_query_string&apos; is never used." verbose="The function &apos;parse_query_string&apos; is never used." cwe="561">
            <location file="serverhttp/server_http.hpp" line="219" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;port_int&apos; is never used." verbose="The function &apos;port_int&apos; is never used." cwe="561">
            <location file="Url.cpp" line="597" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;pushError&apos; is never used." verbose="The function &apos;pushError&apos; is never used." cwe="561">
            <location file="jsoncpp.cpp" line="1075" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;remote_endpoint_address&apos; is never used." verbose="The function &apos;remote_endpoint_address&apos; is never used." cwe="561">
            <location file="serverhttp/server_http.hpp" line="205" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;remote_endpoint_port&apos; is never used." verbose="The function &apos;remote_endpoint_port&apos; is never used." cwe="561">
            <location file="serverhttp/server_http.hpp" line="214" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;removeIndex&apos; is never used." verbose="The function &apos;removeIndex&apos; is never used." cwe="561">
            <location file="jsoncpp.cpp" line="3626" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;safe_bool_aux&apos; is never used." verbose="The function &apos;safe_bool_aux&apos; is never used." cwe="561">
            <location file="url/Url.h" line="267" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;save_stats_to_mysql&apos; is never used." verbose="The function &apos;save_stats_to_mysql&apos; is never used." cwe="561">
            <location file="Utils.cpp" line="1391" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;setExceptionHandling&apos; is never used." verbose="The function &apos;setExceptionHandling&apos; is never used." cwe="561">
            <location file="tclap/CmdLine.h" line="608" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;setOutput&apos; is never used." verbose="The function &apos;setOutput&apos; is never used." cwe="561">
            <location file="tclap/CmdLine.h" line="565" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;set_def_port&apos; is never used." verbose="The function &apos;set_def_port&apos; is never used." cwe="561">
            <location file="Url.cpp" line="635" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;set_desc&apos; is never used." verbose="The function &apos;set_desc&apos; is never used." cwe="561">
            <location file="InterfaceInfo.cpp" line="194" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;set_dir&apos; is never used." verbose="The function &apos;set_dir&apos; is never used." cwe="561">
            <location file="url/Path.h" line="73" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;sqlite3_enable_load_extension&apos; is never used." verbose="The function &apos;sqlite3_enable_load_extension&apos; is never used." cwe="561">
            <location file="sqlite3.c" line="114460" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;sqlite3_global_recover&apos; is never used." verbose="The function &apos;sqlite3_global_recover&apos; is never used." cwe="561">
            <location file="sqlite3.c" line="146690" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;sqlite3_memory_alarm&apos; is never used." verbose="The function &apos;sqlite3_memory_alarm&apos; is never used." cwe="561">
            <location file="sqlite3.c" line="25204" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;sqlite3_shutdown&apos; is never used." verbose="The function &apos;sqlite3_shutdown&apos; is never used." cwe="561">
            <location file="sqlite3.c" line="143671" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;stof&apos; is never used." verbose="The function &apos;stof&apos; is never used." cwe="561">
            <location file="Utils.cpp" line="585" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;strictMode&apos; is never used." verbose="The function &apos;strictMode&apos; is never used." cwe="561">
            <location file="jsoncpp.cpp" line="289" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;toStyledString&apos; is never used." verbose="The function &apos;toStyledString&apos; is never used." cwe="561">
            <location file="jsoncpp.cpp" line="3863" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;to_narrow&apos; is never used." verbose="The function &apos;to_narrow&apos; is never used." cwe="561">
            <location file="Utils.cpp" line="2137" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;typeDescription&apos; is never used." verbose="The function &apos;typeDescription&apos; is never used." cwe="561">
            <location file="tclap/ArgException.h" line="91" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;unescape_not&apos; is never used." verbose="The function &apos;unescape_not&apos; is never used." cwe="561">
            <location file="Url.cpp" line="784" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;updir&apos; is never used." verbose="The function &apos;updir&apos; is never used." cwe="561">
            <location file="Path.cpp" line="183" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;validate&apos; is never used." verbose="The function &apos;validate&apos; is never used." cwe="561">
            <location file="jsoncpp.cpp" line="2169" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;vdbeRecordCompareInt&apos; is never used." verbose="The function &apos;vdbeRecordCompareInt&apos; is never used." cwe="561">
            <location file="sqlite3.c" line="77178" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;vdbeRecordCompareString&apos; is never used." verbose="The function &apos;vdbeRecordCompareString&apos; is never used." cwe="561">
            <location file="sqlite3.c" line="77272" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;vdbeSorterCompare&apos; is never used." verbose="The function &apos;vdbeSorterCompare&apos; is never used." cwe="561">
            <location file="sqlite3.c" line="88585" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;vdbeSorterCompareInt&apos; is never used." verbose="The function &apos;vdbeSorterCompareInt&apos; is never used." cwe="561">
            <location file="sqlite3.c" line="88645" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;vdbeSorterCompareText&apos; is never used." verbose="The function &apos;vdbeSorterCompareText&apos; is never used." cwe="561">
            <location file="sqlite3.c" line="88604" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;writeString&apos; is never used." verbose="The function &apos;writeString&apos; is never used." cwe="561">
            <location file="jsoncpp.cpp" line="5288" />
        </error>
        <error id="missingIncludeSystem" severity="information" msg="Cppcheck cannot find all the include files (use --check-config for details)" verbose="Cppcheck cannot find all the include files. Cppcheck can check the code without the include files found. But the results will probably be more accurate if all the include files are found. Please check your project&apos;s include directories and add all of them as include directories for Cppcheck. To see what files Cppcheck cannot find use --check-config." />
    </errors>
</results>
